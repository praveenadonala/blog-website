import { DataType, ErrorType, NumberFormat, StringFormat } from './constants';
export type AllDataType = string | string[] | DataType | DataType[];
interface CommonScheme {
    parent?: Scheme;
    key?: string;
    type?: AllDataType;
    optional?: boolean;
    nullable?: boolean;
}
export type BooleanScheme = CommonScheme;
export interface MinMax<T> {
    min?: T;
    exclusiveMin?: boolean;
    max?: T;
    exclusiveMax?: boolean;
}
export interface MinMaxScheme<T> extends CommonScheme, MinMax<T> {
}
export interface NumberScheme extends MinMaxScheme<number> {
    enum?: number[];
    format?: string | string[] | NumberFormat | NumberFormat[];
}
export interface StringScheme extends CommonScheme {
    enum?: string[];
    format?: string | string[] | StringFormat | StringFormat[];
    pattern?: string | string[] | RegExp | RegExp[];
    length?: number;
    minLength?: number;
    maxLength?: number;
}
export interface ObjectScheme extends CommonScheme {
    properties?: Scheme[];
    allowNoProperty?: boolean;
}
export interface DateScheme extends MinMaxScheme<string | Date> {
}
export type RegExpScheme = CommonScheme;
export interface ArrayScheme extends CommonScheme {
    unique?: boolean;
    items?: AllDataType | Scheme | Scheme[];
    length?: number;
    minLength?: number;
    maxLength?: number;
}
export type Scheme = BooleanScheme | NumberScheme | StringScheme | ObjectScheme | DateScheme | RegExpScheme | ArrayScheme;
export interface Options {
    customErrorMsg?: {
        [key in ErrorType]?: string;
    };
}
export interface InternalOptions extends Options {
    path: string[];
}
export declare class EjvError {
    type: ErrorType;
    message: string;
    data: unknown;
    path: string | undefined;
    errorScheme: Scheme | undefined;
    errorData: unknown | undefined;
    isSchemeError: boolean;
    isDataError: boolean;
    constructor(param: {
        type: ErrorType;
        message: string;
        data: unknown;
        path?: string[];
        errorScheme?: Scheme;
        errorData?: unknown;
        isSchemeError?: boolean;
    });
}
export interface AnyObject {
    [key: string]: unknown;
}
export {};
